// Code generated by MockGen. DO NOT EDIT.
// Source: library/service (interfaces: BookService)

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	dto "library/dto"
	errs "library/errs"
	reflect "reflect"
)

// MockBookService is a mock of BookService interface
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// CreateNewBook mocks base method
func (m *MockBookService) CreateNewBook(arg0 dto.BookRequest) (*dto.BookResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBook", arg0)
	ret0, _ := ret[0].(*dto.BookResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// CreateNewBook indicates an expected call of CreateNewBook
func (mr *MockBookServiceMockRecorder) CreateNewBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBook", reflect.TypeOf((*MockBookService)(nil).CreateNewBook), arg0)
}

// DeleteBook mocks base method
func (m *MockBookService) DeleteBook(arg0 dto.BookRequest) (*dto.BookResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0)
	ret0, _ := ret[0].(*dto.BookResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockBookServiceMockRecorder) DeleteBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookService)(nil).DeleteBook), arg0)
}

// RetrieveAllBooks mocks base method
func (m *MockBookService) RetrieveAllBooks() ([]dto.BookResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAllBooks")
	ret0, _ := ret[0].([]dto.BookResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// RetrieveAllBooks indicates an expected call of RetrieveAllBooks
func (mr *MockBookServiceMockRecorder) RetrieveAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllBooks", reflect.TypeOf((*MockBookService)(nil).RetrieveAllBooks))
}

// RetrieveBook mocks base method
func (m *MockBookService) RetrieveBook(arg0 dto.BookRequest) (*dto.BookResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveBook", arg0)
	ret0, _ := ret[0].(*dto.BookResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// RetrieveBook indicates an expected call of RetrieveBook
func (mr *MockBookServiceMockRecorder) RetrieveBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveBook", reflect.TypeOf((*MockBookService)(nil).RetrieveBook), arg0)
}

// UpdateBook mocks base method
func (m *MockBookService) UpdateBook(arg0 dto.BookRequest) (*dto.BookResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(*dto.BookResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockBookServiceMockRecorder) UpdateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookService)(nil).UpdateBook), arg0)
}
